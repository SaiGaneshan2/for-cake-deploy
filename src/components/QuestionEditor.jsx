import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import './QuestionEditor.css';

const QuestionEditor = ({ questions: initialQuestions, numLevels, questionsPerLevel }) => {
  const [questions, setQuestions] = useState(initialQuestions);
  const [roomCode, setRoomCode] = useState(null);
  const [savedQuizInfo, setSavedQuizInfo] = useState(null);
  const navigate = useNavigate();

  const handleQuestionChange = (index, field, value) => {
    const updatedQuestions = [...questions];
    updatedQuestions[index][field] = value;
    setQuestions(updatedQuestions);
  };

  const handleOptionChange = (questionIndex, optionIndex, value) => {
    const updatedQuestions = [...questions];
    updatedQuestions[questionIndex].options[optionIndex] = value;
    setQuestions(updatedQuestions);
  };

  const handleCorrectAnswerChange = (questionIndex, value) => {
    const updatedQuestions = [...questions];
    updatedQuestions[questionIndex].correctAnswer = value;
    setQuestions(updatedQuestions);
  };

  const generateRoomCode = () => {
    return Math.random().toString(36).substring(2, 8).toUpperCase();
  };

  const handleSaveQuiz = async () => {
    try {
      console.log('Saving quiz with questions:', questions);
      
      // Prepare quiz payload for original backend (server generates room code)
      const quizPayload = {
        questions: questions,
        numLevels: numLevels,
        questionsPerLevel: questionsPerLevel
      };

      // Save quiz to original backend (localhost:3001)
      const response = await fetch('http://localhost:3001/api/quiz', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(quizPayload)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      }

      const result = await response.json();
      console.log('Quiz saved successfully:', result);

      // Get the room code generated by the server
      const serverRoomCode = result.roomCode;

      // Store the room code in state
      setRoomCode(serverRoomCode);
      
      // Store the complete quiz info to show success screen
      setSavedQuizInfo({
        roomCode: serverRoomCode,
        totalQuestions: questions.length,
        numLevels: numLevels,
        questionsPerLevel: questionsPerLevel,
        timestamp: new Date().toLocaleString()
      });
      
      alert(`✅ Quiz saved successfully! Room Code: ${serverRoomCode}`);
      
    } catch (error) {
      console.error('Error saving quiz:', error);
      alert(`❌ Error saving quiz: ${error.message}`);
    }
  };

  const handleDeleteQuestion = (index) => {
    const updatedQuestions = questions.filter((_, i) => i !== index);
    setQuestions(updatedQuestions);
  };

  // If quiz is saved, show success screen instead of editor
  if (savedQuizInfo) {
    return (
      <div className="question-editor-container">
        <div className="success-screen">
          <div className="success-icon">✅</div>
          <h1 className="success-title">Quiz Saved Successfully!</h1>
          <p className="success-subtitle">Your quiz is ready to share with students</p>

          <div className="success-info-card">
            <div className="info-section">
              <h3>📋 Quiz Details</h3>
              <div className="info-grid">
                <div className="info-item">
                  <span className="info-label">Total Questions:</span>
                  <span className="info-value">{savedQuizInfo.totalQuestions}</span>
                </div>
                <div className="info-item">
                  <span className="info-label">Levels:</span>
                  <span className="info-value">{savedQuizInfo.numLevels}</span>
                </div>
                <div className="info-item">
                  <span className="info-label">Questions per Level:</span>
                  <span className="info-value">{savedQuizInfo.questionsPerLevel}</span>
                </div>
                <div className="info-item">
                  <span className="info-label">Created:</span>
                  <span className="info-value">{savedQuizInfo.timestamp}</span>
                </div>
              </div>
            </div>

            <div className="room-code-section">
              <h3>🎯 Room Code</h3>
              <div className="room-code-display">
                <span className="room-code-text">{savedQuizInfo.roomCode}</span>
                <button
                  className="copy-button"
                  onClick={() => {
                    navigator.clipboard.writeText(savedQuizInfo.roomCode);
                    alert('Room code copied to clipboard!');
                  }}
                  title="Copy room code"
                >
                  📋 Copy
                </button>
              </div>
              <p className="room-code-hint">Share this code with your students to access the quiz</p>
            </div>

            <div className="action-section">
              <h3>🚀 Next Steps</h3>
              <div className="action-buttons">
                <button
                  className="play-quiz-button primary-button"
                  onClick={() => navigate(`/play/${savedQuizInfo.roomCode}`)}
                >
                  🎮 Play Quiz Now
                </button>
                <button
                  className="share-link-button secondary-button"
                  onClick={() => {
                    const link = `${window.location.origin}/play/${savedQuizInfo.roomCode}`;
                    navigator.clipboard.writeText(link);
                    alert('Quiz link copied to clipboard!');
                  }}
                >
                  🔗 Copy Quiz Link
                </button>
              </div>
              <div className="quiz-link-display">
                <span className="link-label">Direct Link:</span>
                <a
                  href={`/play/${savedQuizInfo.roomCode}`}
                  className="quiz-link"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  {window.location.origin}/play/{savedQuizInfo.roomCode}
                </a>
              </div>
            </div>
          </div>

          <div className="success-footer">
            <button
              className="create-another-button"
              onClick={() => navigate('/')}
            >
              ➕ Create Another Quiz
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Default: Show question editor
  return (
    <div className="question-editor-container">
      <div className="editor-header">
        <h1>📝 Edit Your Quiz Questions</h1>
        <p>Review and edit the generated questions below. Questions are organized by level.</p>
        <div className="quiz-config-info">
          <span className="config-badge">📊 {numLevels} Levels</span>
          <span className="config-badge">❓ {questionsPerLevel} Questions per Level</span>
          <span className="config-badge">📝 {questions.length} Total Questions</span>
        </div>
      </div>

      <div className="questions-list">
        {/* Outer loop: Iterate through each level */}
        {Array.from({ length: numLevels }, (_, levelIndex) => {
          // Calculate the slice boundaries for this level
          const startIndex = levelIndex * questionsPerLevel;
          const endIndex = startIndex + questionsPerLevel;
          
          // Get the questions for this specific level using .slice()
          const levelQuestions = questions.slice(startIndex, endIndex);
          
          // Only render the level if it has questions
          if (levelQuestions.length === 0) return null;
          
          return (
            <div key={levelIndex} className="level-section">
              {/* Level heading */}
              <div className="level-header">
                <h2>🎯 Level {levelIndex + 1}</h2>
                <span className="level-question-count">
                  {levelQuestions.length} question{levelQuestions.length !== 1 ? 's' : ''}
                </span>
              </div>
              
              {/* Inner loop: Map over questions in this level */}
              {levelQuestions.map((question, indexInLevel) => {
                // Calculate the actual index in the full questions array
                const questionIndex = startIndex + indexInLevel;
                
                return (
                  <div key={questionIndex} className="question-card">
                    <div className="question-header">
                      <h3>Question {indexInLevel + 1}</h3>
                      <button
                        className="delete-button"
                        onClick={() => handleDeleteQuestion(questionIndex)}
                        title="Delete this question"
                      >
                        🗑️ Delete
                      </button>
                    </div>

                    <div className="question-field">
                      <label>Question Text:</label>
                      <input
                        type="text"
                        value={question.question}
                        onChange={(e) => handleQuestionChange(questionIndex, 'question', e.target.value)}
                        className="question-input"
                        placeholder="Enter question text"
                      />
                    </div>

                    <div className="options-section">
                      <label>Answer Options:</label>
                      {question.options.map((option, optionIndex) => (
                        <div key={optionIndex} className="option-field">
                          <span className="option-label">Option {optionIndex + 1}:</span>
                          <input
                            type="text"
                            value={option}
                            onChange={(e) => handleOptionChange(questionIndex, optionIndex, e.target.value)}
                            className="option-input"
                            placeholder={`Enter option ${optionIndex + 1}`}
                          />
                          {option === question.correctAnswer && (
                            <span className="correct-indicator" title="Correct answer">✓</span>
                          )}
                        </div>
                      ))}
                    </div>

                    <div className="correct-answer-section">
                      <label>Correct Answer:</label>
                      <select
                        value={question.correctAnswer}
                        onChange={(e) => handleCorrectAnswerChange(questionIndex, e.target.value)}
                        className="correct-answer-select"
                      >
                        {question.options.map((option, optionIndex) => (
                          <option key={optionIndex} value={option}>
                            {option}
                          </option>
                        ))}
                      </select>
                    </div>
                  </div>
                );
              })}
            </div>
          );
        })}
      </div>

      <div className="editor-footer">
        <div className="quiz-summary">
          <p>Total Questions: <strong>{questions.length}</strong></p>
          <p>Levels: <strong>{numLevels}</strong></p>
        </div>
        <div className="footer-buttons">
          <button
            className="save-quiz-button"
            onClick={handleSaveQuiz}
          >
            💾 Save Quiz
          </button>
          {roomCode && (
            <button
              className="play-now-button"
              onClick={() => navigate(`/play/${roomCode}`)}
            >
              🎮 Play Now
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

export default QuestionEditor;
